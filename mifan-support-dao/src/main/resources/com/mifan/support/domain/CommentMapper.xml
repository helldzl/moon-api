<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mifan.support.domain.Comment">

    <!-- result map -->
    <resultMap id="comment" type="com.mifan.support.domain.Comment">
        <id property="id" column="id" javaType="long"/>
        <result property="themeId" column="theme_id" javaType="long"/>
        <result property="confId" column="conf_id" javaType="long"/>
        <result property="topId" column="top_id" javaType="long"/>
        <result property="reUserId" column="re_user_id" javaType="long"/>
        <result property="replayId" column="replay_id" javaType="long"/>
        <result property="content" column="content" javaType="string"/>
        <result property="enabled" column="enabled" javaType="int"/>
        <result property="isAnonymous" column="is_anonymous" javaType="int"/>
        <result property="state" column="state" javaType="int"/>
        <result property="creator" column="creator" javaType="long"/>
        <result property="created" column="created" javaType="date"/>
    </resultMap>

    <!-- sql -->
    <sql id="columns">
        <choose>
            <when test="fields != null and fields.size != 0">
                <foreach collection="fields" separator="," item="item" index="index">
                    ${item.fullname}
                </foreach>
            </when>
            <otherwise>
                id, theme_id, conf_id, top_id, re_user_id, replay_id, content, enabled, is_anonymous, state, creator, created 
            </otherwise>
        </choose>
    </sql>

    <sql id="insertColumns">
        <trim suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="themeId != null">
                theme_id,
            </if>
            <if test="confId != null">
                conf_id,
            </if>
            <if test="topId != null">
                top_id,
            </if>
            <if test="reUserId != null">
                re_user_id,
            </if>
            <if test="replayId != null">
                replay_id,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="enabled != null">
                enabled,
            </if>
            <if test="isAnonymous != null">
                is_anonymous,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="creator != null">
                creator,
            </if>
            <if test="created != null">
                created,
            </if>
        </trim>
    </sql>

    <sql id="insertValues">
        <trim suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="themeId != null">
                #{themeId},
            </if>
            <if test="confId != null">
                #{confId},
            </if>
            <if test="topId != null">
                #{topId},
            </if>
            <if test="reUserId != null">
                #{reUserId},
            </if>
            <if test="replayId != null">
                #{replayId},
            </if>
            <if test="content != null">
                #{content},
            </if>
            <if test="enabled != null">
                #{enabled},
            </if>
            <if test="isAnonymous != null">
                #{isAnonymous},
            </if>
            <if test="state != null">
                #{state},
            </if>
            <if test="creator != null">
                #{creator},
            </if>
            <if test="created != null">
                #{created},
            </if>
        </trim>
    </sql>

    <sql id="updateValues">
        <trim suffixOverrides=",">
            <if test="themeId != null">
                theme_id = #{themeId},
            </if>
            <if test="confId != null">
                conf_id = #{confId},
            </if>
            <if test="topId != null">
                top_id = #{topId},
            </if>
            <if test="reUserId != null">
                re_user_id = #{reUserId},
            </if>
            <if test="replayId != null">
                replay_id = #{replayId},
            </if>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="enabled != null">
                enabled = #{enabled},
            </if>
            <if test="isAnonymous != null">
                is_anonymous = #{isAnonymous},
            </if>
            <if test="state != null">
                state = #{state},
            </if>
            <if test="creator != null">
                creator = #{creator},
            </if>
            <if test="created != null">
                created = #{created},
            </if>
        </trim>
    </sql>

    <sql id="updateValuesByCriterion">
        <trim suffixOverrides=",">
            <if test="entity.themeId != null">
                theme_id = #{entity.themeId},
            </if>
            <if test="entity.confId != null">
                conf_id = #{entity.confId},
            </if>
            <if test="entity.topId != null">
                top_id = #{entity.topId},
            </if>
            <if test="entity.reUserId != null">
                re_user_id = #{entity.reUserId},
            </if>
            <if test="entity.replayId != null">
                replay_id = #{entity.replayId},
            </if>
            <if test="entity.content != null">
                content = #{entity.content},
            </if>
            <if test="entity.enabled != null">
                enabled = #{entity.enabled},
            </if>
            <if test="entity.isAnonymous != null">
                is_anonymous = #{entity.isAnonymous},
            </if>
            <if test="entity.state != null">
                state = #{entity.state},
            </if>
            <if test="entity.creator != null">
                creator = #{entity.creator},
            </if>
            <if test="entity.created != null">
                created = #{entity.created},
            </if>
        </trim>
    </sql>

    <sql id="simpleConditions">
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="entity.id != null">
                AND id = #{entity.id}
            </if>
            <if test="entity.themeId != null">
                AND theme_id = #{entity.themeId}
            </if>
            <if test="entity.confId != null">
                AND conf_id = #{entity.confId}
            </if>
            <if test="entity.topId != null">
                AND top_id = #{entity.topId}
            </if>
            <if test="entity.reUserId != null">
                AND re_user_id = #{entity.reUserId}
            </if>
            <if test="entity.replayId != null">
                AND replay_id = #{entity.replayId}
            </if>
            <if test="entity.content != null">
                AND content = #{entity.content}
            </if>
            <if test="entity.enabled != null">
                AND enabled = #{entity.enabled}
            </if>
            <if test="entity.isAnonymous != null">
                AND is_anonymous = #{entity.isAnonymous}
            </if>
            <if test="entity.state != null">
                AND state = #{entity.state}
            </if>
            <if test="entity.creator != null">
                AND creator = #{entity.creator}
            </if>
            <if test="entity.created != null">
                AND created = #{entity.created}
            </if>
        </trim>
    </sql>

    <sql id="sort">
        <trim prefix="ORDER BY" suffixOverrides=",">
            <foreach collection="orders" separator="," item="item" index="index">
                ${item.property} ${item.direction}
            </foreach>
        </trim>
    </sql>

    <sql id="criterion">
        <foreach collection="conditions.tokens" item="item">
            <choose>
                <when test="item.param">#{item.value}</when><otherwise>${item.value}</otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="limit">
        LIMIT #{offset}, #{pageSize}
    </sql>

    <!-- insert -->
    <insert id="save" parameterType="com.mifan.support.domain.Comment" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO comment(<include refid="insertColumns"/>) VALUES (<include refid="insertValues"/>)
    </insert>

    <!-- insert into on duplicate -->
    <insert id="saveOrUpdate" parameterType="com.mifan.support.domain.Comment" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO comment(<include refid="insertColumns"/>) VALUES (<include refid="insertValues"/>) ON DUPLICATE KEY UPDATE <include refid="updateValues"/>
    </insert>

    <!-- delete -->
    <delete id="delete" parameterType="long">
        DELETE FROM comment WHERE id = #{id}
    </delete>

    <!-- update -->
    <update id="update" parameterType="com.mifan.support.domain.Comment">
        UPDATE comment SET <include refid="updateValues"/> WHERE id = #{id}
    </update>

    <update id="updateByCriterion" parameterType="com.mifan.support.domain.Comment">
        UPDATE comment SET <include refid="updateValuesByCriterion"/> WHERE id = #{entity.id} AND <include refid="criterion"></include>
    </update>

    <!-- select -->
    <select id="findOne" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment WHERE id = #{id}
    </select>

    <select id="findOneByObject" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment <include refid="simpleConditions"></include>
    </select>

    <select id="findAll" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment WHERE ${field} IN
        <foreach collection="ids" open="(" separator="," close=")" index="index" item="item" >
            ${item}
        </foreach>
    </select>

    <select id="findAllByObject" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment <include refid="simpleConditions"></include>
    </select>

    <select id="findAllByCriterion" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment WHERE <include refid="criterion"></include>
    </select>

    <select id="findPage" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment <include refid="simpleConditions"></include> <include refid="sort"></include> <include refid="limit"></include>
    </select>

    <select id="findPageByCriterion" parameterType="map" resultMap="comment">
        SELECT
        <include refid="columns"></include>
        FROM comment WHERE <include refid="criterion"></include> <include refid="sort"></include> <include refid="limit"></include>
    </select>
    
    <!-- 查询某个一级评论的热门回复 -->
    <select id="findHotReByObject" parameterType="map" resultMap="comment">
        select 
            c.id,c.created,c.theme_id,c.conf_id,c.top_id,c.content,c.re_user_id,c.replay_id,c.is_anonymous,c.creator,
            SUM(cs.sum) sums
            <choose>
                <when test="currentUserId != null">
                    ,p.score currentScore 
                </when>
            </choose>
        FROM
            comment c
        JOIN
            comment_summary cs
        ON
            c.id=cs.comment_id
        AND
            cs.type IN (0,1,2)
        <choose>
            <when test="currentUserId != null">
                LEFT JOIN
                    praise p 
                ON 
                    p.comment_id = c.id AND p.creator = #{currentUserId} 
            </when>
        </choose>
        WHERE
            c.top_id = #{topId} AND c.enabled = 1 AND c.state = 0
        GROUP BY
            c.id
        HAVING
            sums >= 5
        ORDER BY sums DESC
        LIMIT 0,5
    </select>
    <!-- 查询所有的热门评论 -->
    <select id="findHotByObject" parameterType="map" resultMap="comment">
        select
            c.id,c.created,c.theme_id,c.conf_id,c.top_id,c.content,c.re_user_id,c.replay_id,c.is_anonymous,c.creator,
            SUM(cs.sum) sums
            <choose>
                <when test="currentUserId != null">
                    ,p.score currentScore
                </when>
            </choose>
        FROM
            comment c
        JOIN
            comment_summary cs
        ON
            c.id = cs.comment_id AND cs.conf_id = #{confId}
        AND cs.theme_id IN
            <foreach collection="themeIds" open="(" separator="," close=")" index="index" item="item" >
                ${item}
            </foreach>
        AND cs.type IN (0,1,2) AND cs.comment_id != 0
        <choose>
            <when test="currentUserId != null">
                LEFT JOIN
                    praise p
                ON
                    p.comment_id = c.id AND p.creator = #{currentUserId}
            </when>
        </choose>
        WHERE 
            c.enabled = 1 AND c.state = 0
        GROUP BY
            c.id
        HAVING
            sums >= 5
        ORDER BY sums DESC
        LIMIT 0,5
        <!-- SELECT
            c.id,c.created,c.theme_id,c.conf_id,c.top_id,c.content,c.re_user_id,c.replay_id,
            c.is_anonymous,c.creator
        <choose>
            <when test="currentUserId != null">
                ,p.score currentScore
                FROM comment c LEFT JOIN praise p
                ON p.comment_id = c.id AND p.creator = #{currentUserId}
            </when>
            <otherwise>
                FROM comment c
            </otherwise>
        </choose>
        WHERE c.enabled = 1 AND c.state = 0 AND c.id IN
        (SELECT sm.comment_id from(SELECT cs.comment_id, SUM(cs.sum) sums
        FROM comment_summary cs WHERE cs.conf_id = #{confId} AND cs.type in (0,2) AND cs.comment_id != 0 AND cs.theme_id IN
        <foreach collection="themeIds" open="(" separator="," close=")" index="index" item="item" >
            ${item}
        </foreach>
        GROUP BY comment_id HAVING sums > 5 ORDER BY sums DESC LIMIT 0,5) AS sm) -->
    </select>
    
    <!-- 关联查询 -->
    <select id="findPageWithPraise" parameterType="map" resultMap="comment">
        SELECT
            c.id,c.created,c.theme_id,c.conf_id,c.top_id,c.content,c.re_user_id,c.replay_id,c.is_anonymous,c.creator
        <choose>
            <when test="currentUserId != null">
                ,p.score currentScore
                FROM comment c LEFT JOIN praise p
                ON p.comment_id = c.id AND p.creator = #{currentUserId}
            </when>
            <otherwise>
                FROM comment c
            </otherwise>
        </choose>
        WHERE c.conf_id = #{entity.confId} AND c.top_id = #{entity.topId} AND c.enabled = 1 AND c.state = 0 AND c.theme_id IN 
        <foreach collection="themeIds" open="(" separator="," close=")" index="index" item="item" >
            ${item}
        </foreach>
        <include refid="sort"></include><include refid="limit"></include>
    </select>
    <!-- 关联查询统计 -->
    <select id="countInThemeIds" parameterType="map" resultType="long">
        SELECT COUNT(*) FROM comment 
        <include refid="simpleConditions"></include> 
         AND theme_id IN 
         <foreach collection="themeIds" open="(" separator="," close=")" index="index" item="item" >
            ${item}
        </foreach>
    </select>

    <select id="count" resultType="long">
        SELECT COUNT(*) FROM comment
    </select>

    <select id="countByCondition" parameterType="map" resultType="long">
        SELECT COUNT(*) FROM comment <include refid="simpleConditions"></include>
    </select>

    <select id="countByCriterion" parameterType="map" resultType="long">
        SELECT COUNT(*) FROM comment WHERE <include refid="criterion"></include>
    </select>

    <select id="exists" parameterType="long" resultType="long">
        SELECT COUNT(*) FROM comment WHERE id = #{id}
    </select>

</mapper>